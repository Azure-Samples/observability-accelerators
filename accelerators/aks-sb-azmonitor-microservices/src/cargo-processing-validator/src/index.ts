import { config } from 'dotenv';
import { CargoValidationService } from './services/CargoValidationService';
import * as appInsights from 'applicationinsights';
import { CUSTOM_PROPERTY_CARGO_DESTINATION, CUSTOM_PROPERTY_CARGO_ID, CUSTOM_PROPERTY_CARGO_OPERATION_ID, CUSTOM_PROPERTY_CARGO_VALID, ServiceBusProcessingService } from './services/ServiceBusProcessingService';
import { CUSTOM_PROPERTY_REQUEST_PARENT_ID } from './services/ServiceBusWithTelemetry';

// load environment variables
config();


// start application insights and allow console.log to export logs
// see configuration details at https://docs.microsoft.com/en-us/azure/azure-monitor/app/nodejs#sdk-configuration
appInsights
  .setup(process.env.APPLICATIONINSIGHTS_CONNECTION_STRING)
  .setAutoDependencyCorrelation(true)
  .setAutoCollectRequests(true)
  // .setAutoCollectPerformance(true, true) // uncomment to send performance metrics (note this will increase the amount of data sent to Azure Monitor)
  // .setSendLiveMetrics(true)
  .setAutoCollectExceptions(true)
  .setAutoCollectDependencies(true)
  .setAutoCollectConsole(true, true)
  .setUseDiskRetryCaching(true)
  .setDistributedTracingMode(appInsights.DistributedTracingModes.AI_AND_W3C)
  .start();



const client = appInsights.defaultClient;
client.context.tags[client.context.keys.cloudRole] = 'cargo-processing-validator';

// Automatically add tags for operationID/ParentID if set in correlation context
client.addTelemetryProcessor((envelope, contextObjects) => {
  if (envelope?.data?.baseData?.properties) {
    const azNamespace = envelope.data.baseData.properties["az.namespace"];
    if (azNamespace === "Microsoft.ServiceBus") {
      // This is a telemetry item that was auto-generated by the Azure SDK
      // Return false to suppress it as we are replacing with our own telemetry
      // which contains additional metadata
      return false;
      // If you wish to suppress individual message types use conditions such as:
      //    envelope?.data?.baseData?.name === "Azure.ServiceBus.message"
    }
  }


  // If we have the cargo-operation-id in the correlation context, add it to the telemetry
  const customProperties = contextObjects?.correlationContext?.customProperties;
  const operation = contextObjects?.correlationContext?.operation;
  const envelopeProperties = envelope.data?.baseData?.properties;
  const telemetryType = envelope.data?.baseType;
  
  if (envelopeProperties && customProperties?.getProperty(CUSTOM_PROPERTY_CARGO_ID)) {
    envelopeProperties["cargo-id"] = customProperties.getProperty(CUSTOM_PROPERTY_CARGO_ID);
  }
  if (envelopeProperties && customProperties?.getProperty(CUSTOM_PROPERTY_CARGO_OPERATION_ID)) {
    envelopeProperties["cargo-operation-id"] = customProperties.getProperty(CUSTOM_PROPERTY_CARGO_OPERATION_ID);
  }
  if (envelopeProperties && customProperties?.getProperty(CUSTOM_PROPERTY_CARGO_VALID)) {
    envelopeProperties["cargo-valid"] = customProperties.getProperty(CUSTOM_PROPERTY_CARGO_VALID);
  }
  if (envelopeProperties && customProperties?.getProperty(CUSTOM_PROPERTY_CARGO_DESTINATION)) {
    envelopeProperties["cargo-destination"] = customProperties.getProperty(CUSTOM_PROPERTY_CARGO_DESTINATION);
  }
  // ensure dependencies are children of the ServiceBus.ProcessMessage request
  if (telemetryType && telemetryType == 'RemoteDependencyData' && operation && customProperties?.getProperty(CUSTOM_PROPERTY_REQUEST_PARENT_ID)) {
    operation.parentId = customProperties?.getProperty(CUSTOM_PROPERTY_REQUEST_PARENT_ID);
    envelope.tags['ai.operation.parentId'] = customProperties?.getProperty(CUSTOM_PROPERTY_REQUEST_PARENT_ID);
  }

  return true;
});

const cargoValidationService: CargoValidationService =
  new CargoValidationService(client);

const serviceBusProcessingService: ServiceBusProcessingService =
  new ServiceBusProcessingService(
    process.env.SERVICE_BUS_CONNECTION_STRING as string,
    process.env.QUEUE_NAME as string,
    process.env.TOPIC_NAME as string,
    process.env.OPERATION_QUEUE_NAME as string,
    parseInt(process.env.MAX_MESSAGE_DEQUEUE_COUNT as string),
    cargoValidationService,
    client
  );

(async function () {
  try {
    console.log("Queue processing starting...");
    await serviceBusProcessingService.startProcessingQueueMessages();
    console.log("Queue processing started");
  } catch (e: any) {
    // throwing the error causes the container to self-destruct
    // exceptions and other telemetry events from the original request are not logged to application insights
    // code to log an explicit exception here would be: client.trackException({ exception: e, severity: SeverityLevel.Error });
    throw e;
  }
})();
